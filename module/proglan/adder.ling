# Zergling programming language
# One-bit full adder
# by Kaleb Williams

#*************************************Node*************************************#
def Node(r, i, n)
	{
	rank = r;
	item = i;
	next = n;
	def setNext(newNext)
		{
		next = newNext;
		}
	def dispatch(string)
		{
		if (string == "rank")
			{
			return rank;
			}
		elif (string == "item")
			{
			return item;
			}
		elif (string == "next")
			{
			return next;
			}
		elif (string == "setNext")
			{
			return setNext;
			}
		}
	return dispatch;
	}
#******************************************************************************#
#*************************************Cons*************************************#
def cons(l, r)
	{
	left = l;
	right = r;
	def dispatch(string)
		{
		if string == "left"
			{
			return left;
			}
		elif string == "right"
			{
			return right;
			}
		}
	return dispatch;
	}

def car(cell)
	{
	return cell("left");
	}

def cdr(cell)
	{
	return cell("right");
	}
#******************************************************************************#
#********************************Priotity Queue********************************#
def PriorityQueue()
	{
	head = Node(0, 0, 0);
	size = 0;
	def insert(rank, item)
		{
		#print("in insert");
		spot = head;
		next = spot("next");
		while ((not (next == 0)) and (next("rank") <= rank))
			{
			spot = next;
			next = spot("next");
			}
		setNext = spot("setNext");
		setNext(Node(rank, item, (spot("next"))));
		size = size + 1;
		return item;
		}
	def item()
		{
		next = head("next");
		if not(next == 0)
			{
			return next("item");
			}
		else
			{
			return "(empty)";
			}
		}
	def remove()
		{
		result = item();
		setNext = head("setNext");
		next = head("next");
		setNext(next("next"));
		size = size - 1;
		return result;
		}
	def rank()
		{
		next = head("next");
		if not(next == 0)
			{
			return next("rank");
			}
		else
			{
			return "(empty)";
			}
		}
	def isEmpty()
		{
		return size == 0;
		}
	def dispatch(string)
		{
		if (string == "size")
			{
			return size;
			}
		elif (string == "insert")
			{
			return insert;
			}
		elif (string == "item")
			{
			return item();
			}
		elif (string == "remove")
			{
			return remove();
			}
		elif (string == "rank")
			{
			return rank();
			}
		elif (string == "isEmpty")
			{
			return isEmpty();
			}
		}
	return dispatch;
	}

def checkQueue(queue)
	{
	print("item is",queue("item"));
	print("rank is",queue("rank"));
	print("size is",queue("size"));
	print("isEmpty is",queue("isEmpty"));
	print();
	}

#******************************************************************************#
#**********************************Simulator***********************************#
def Sim()
	{
	time = 0;
	events = PriorityQueue();
	def add(event, delay)
		{
		#print("IN ADD MOTHA FUCKAAAAA!");
		insert = events("insert");
		insert((time + delay), event);
		}
	def run()
		{
		while (not events("isEmpty"))
			{
			time = events("rank");
			event = events("remove");
			event();
			}
		}
	def dispatch(string)
		{
		if string == "add"
			{
			return add;
			}
		elif string == "run"
			{
			return run();
			}
		}
	return dispatch;
	}
#******************************************************************************#
#************************************Wire**************************************#
def Wire()
	{
	value = 0;
	dstream = 0;
	def register(action)
		{
		#print("action registered");
		dstream = cons(action, dstream);
		return action;
		}
	def setValue(v)
		{
		#print("set value",value,v);
		value = v;
		#print("value is now", value);
		a = 0;
		items = dstream;
		while (not (items == 0))
			{
			#print("setter loop");
			a = car(items);
			a();
			items = cdr(items);
			#print(items);
			}
		return v;
		}
	def dispatch(string)
		{
		if string == "value"
			{
			return value;
			}
		elif string == "register"
			{
			return register;
			}
		elif string == "setValue"
			{
			return setValue;
			}
		}
	return dispatch;
	}

def makeWire()
	{
	return Wire();
	}

def getSignal(wire)
	{
	return wire("value");
	}

def setSignal(wire, newValue)
	{
	setValue = wire("setValue");
	setValue(newValue);
	}

def addAction(wire, actionProcedure)
	{
	register = wire("register");
	register(actionProcedure);
	}

def makeAgenda()
	{
	return Sim();
	}

theAgenda = makeAgenda();

def propogate()
	{
	theAgenda("run");
	}

def andGate(in1, in2, out)
	{
	delay = 5;
	def action()
		{
		v1 = getSignal(in1);
		v2 = getSignal(in2);
		result = (v1 and v2);
		#print("and result is",result);
		def temp()
			{
			#print("adding",result);
			setSignal(out, result);
			}
		add = theAgenda("add");
		add(temp, delay);
		}
	addAction(in1, action);
	addAction(in2, action);
	}

def orGate(in1, in2, out)
	{
	delay = 5;
	def action()
		{
		v1 = getSignal(in1);
		v2 = getSignal(in2);
		result = (v1 or v2);
		#print("or result is",result);
		def temp()
			{
			setSignal(out, result);
			}
		add = theAgenda("add");
		add(temp, delay);
		}
	addAction(in1, action);
	addAction(in2, action);
	}

def inverter(in, out)
	{
	delay = 5;
	def action()
		{
		v = getSignal(in);
		result = not v;
		#print("not result is",result);
		def temp()
			{
			setSignal(out, result);
			}
		add = theAgenda("add");
		add(temp, delay);
		}
	addAction(in, action);
	}

def halfAdder(augend, addend, sum, cOut)
	{
	internal1 = makeWire();
	internal2 = makeWire();
	orGate(augend, addend, internal1);
	andGate(augend, addend, cOut);
	inverter(cOut, internal2);
	andGate(internal1, internal2, sum);
	}

def fullAdder(augend, addend, cIn, sum, cOut)
	{
	internalSum = makeWire();
	internalC1 = makeWire();
	internalC2 = makeWire();
	halfAdder(addend, cIn, internalSum, internalC1);
	halfAdder(augend, internalSum, sum, internalC2);
	orGate(internalC1, internalC2, cOut);
	}
#******************************************************************************#
#************************************Main**************************************#
def main()
	{
	augend = makeWire();
	addend = makeWire();
	cIn = makeWire();
	sum = makeWire();
	cOut = makeWire();
	#inverter(augend, sum);
	fullAdder(augend, addend, cIn, sum, cOut);
	setSignal(augend, 1);
	setSignal(addend, 1);
	setSignal(cIn, 1);	
	propogate();
	print("sum is",getSignal(sum));
	print("cOut is",getSignal(cOut));
	}

main();
